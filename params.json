{"name":"Consul3","tagline":"consul+docker+registrator+consul_template+nginx","body":"`使用consul+consul_template+registartor+docker进行动态管理nginx的upstream后端server:  ` \r\n\r\n* 基本原理就是：     \r\n　　使用consul做服务发现（进行服务的注册类似etcd），使用consul_template(类似confd)进行nginx配置文件的更新，使用registartor进行检测docker上所起的服务并注册到指定的consul机器上．\r\n\r\n\r\n\r\n* 快速搭建：\r\n\r\n一．consul的搭建   \r\n=====\r\n　　前面文章讲过consul的单机以及集群的搭建，下面不在详细介绍相关参数了：     \r\n\r\n　　　　docker run -d -p 8500:8500  -p 53:53/udp --name=consul  gliderlabs/consul-server -bootstrap　-advertise 127.0.0.1         \r\n　　　　\r\n　　　　注意:-advertise参数表示的是:是给集群中的其他节点展现的地址.      \r\n\r\n二．registartor的搭建   \r\n====\r\n\r\n    docker run -d \\\r\n    --name=registrator \\\r\n    --volume=/var/run/docker.sock:/tmp/docker.sock \\\r\n    gliderlabs/registrator:latest \\\r\n    consul://localhost:8500\r\n　简单介绍下上面参数的含义：    \r\n　　　　第三行表示把docker的socket文件挂载到该docker容器下　第五行表示当检测到docket上有新的服务的时候　会把其注册到指定的consul            \r\n\r\n   注意:此时是需要把localhost换成你搭建consul的那台机器的真实ip(对外出口ip),由于其docker默认使用的 bridge网络模式.        \r\n\r\n\r\n三．consul_template与nginx的搭建   \r\n===\r\n   下面把其consul_template和nginx进行了dockerfile:\r\n   使用docker build -t drname  .  进行生成镜像文件   \r\n　　然后执行进行文件：    \r\n　　　　docker run -it \\\r\n　　　　-e \"CONSUL=$DOCKER_IP:8500\" \\\r\n　　　　-e \"SERVICE=test\" \\\r\n　　　　-p 80:80 drname\r\n上面表示当有名字为test服务的时候　此时就会把该test服务的server加载到nginx的upstream中去．     \r\n-e参数表示给定docker中的变量赋值    \r\n-p表示端口的映射    \r\n-it是交互式  \r\n\r\n注意本地的nginx.conf upstream.conf的编写，关于nginx相关讲解可以看前面文章．\r\n\r\n\r\n\r\nDockerfile:         \r\n\r\n``` nginx         \r\n\r\n#tar -C /usr/local/bin --strip-components 1 -zxf -\r\nADD consul-template /usr/local/bin/\r\n\r\n#Setup Consul Template Files\r\nRUN mkdir /etc/consul-templates\r\nENV CT_FILE /etc/consul-templates/nginx.conf\r\n\r\n#Setup Nginx File\r\nENV NX_FILE /etc/nginx/conf.d/app.conf\r\n\r\n#Default Variables\r\nENV CONSUL consul:8500\r\nENV SERVICE consul-8500\r\n\r\n# Command will\r\n# 1. Write Consul Template File\r\n# 2. Start Nginx\r\n# 3. Start Consul Template\r\n#ADD nginx.conf /etc/nginx/nginx.conf\r\n\r\nCMD echo \"events { worker_connections 100; }     \\n\\ \r\n  http {                                 \\n\\\r\n  upstream app {                         \\n\\\r\n  least_conn;                            \\n\\\r\n  {{range service \\\"$SERVICE\\\"}}         \\n\\\r\n  server  {{.Address}}:{{.Port}};        \\n\\\r\n  {{else}}server 127.0.0.1:65535;{{end}} \\n\\ \r\n}                                        \\n\\\r\nserver {                                 \\n\\\r\n  listen 81 default_server;              \\n\\\r\n  location / {                           \\n\\\r\n    proxy_pass http://app;               \\n\\\r\n  }                                      \\n\\\r\n} }\" > $CT_FILE; \\\r\n/usr/sbin/nginx -c /etc/nginx/nginx.conf \\\r\n& CONSUL_TEMPLATE_LOG=debug consul-template \\\r\n  -consul=$CONSUL \\\r\n  -template \"$CT_FILE:/etc/nginx/nginx.conf:/usr/sbin/nginx -c /etc/nginx/nginx.conf -s reload\";\r\n  \r\n```    \r\n\r\n\r\n四．测试   \r\n====\r\n　　此时已经搭建好了　当我们使用docker进行启动一个名字为test的服务的时候，此时registator会检测到docker的socket有变化则会主动的把该服务注册到指定的consul上．然后consul_template发现指定的consul上的服务有变化的时候,会主动的更新nginx的配置文件，然后重启nginx.\r\n\r\n　　如：   \r\n　　　docker run -it \\  \r\n　　　-e \"SERVICE_NAME=test\" \\   \r\n　　　-p 8000:80 python/server    \r\n\r\n\r\n\r\nCommunite  \r\n====\r\n \r\n在使用中有任何问题，欢迎反馈给我，可以用以下联系方式跟我交流\r\n\r\n* 邮件(1031379296#qq.com, 把#换成@)\r\n* QQ: 1031379296\r\n* weibo: [@王发康](http://weibo.com/u/2786211992/home)\r\n\r\n\r\nThx\r\n====\r\n\r\n* chunshengsterATgmail.com\r\n\r\n\r\nAuthor\r\n====\r\n* Linux\\nginx\\golang\\c\\c++爱好者\r\n* 欢迎一起交流  一起学习# \r\n* Others say good and Others good\r\n\r\n\r\n","google":"consul+docker+registrator+consul_template+nginx","note":"Don't delete this file! It's used internally to help with page regeneration."}